To-Do:
    - add column lengths to string fields in model classes: Column(String(x))
    - specify nullable attributes on model class fields: Column(type, nullable=bool)
    - handle sessions at an endpoint level, i.e. per request; methods that query
      or manipulate data directly in the database should not also handle the lifecycle
      of a session (https://docs.sqlalchemy.org/en/13/orm/session_basics.html)*
    - handle circular imports in Flask configuration (app.py, routes.py)
    - update project directory structure to meet Flask documentation recommendations
    - create remaining dummy data and model objects:
      - occupation*
      - student*
      - field*
      - faculty*
      - semester*
      - course*
      - grade*
    - resolve student course relationship issue (grade associative entity)*
    - generate first student snapshot:
	    - each student snapshot method (listed below) will be defined in Student model object*
      - complete method for career fit
    - generate first school snapshot:
	    - aggregated using all data in database (we are currently storing data for one school)
    - each school lives in its own container?
    - organize endpoint code into seperate controllers (by entity/model object)*
    - seperate model objects from non-model objects (directory structure)*
      - examples:
        - models.db => model objects*
        - models.snapshot => snapshot objects*
    - add __repr__ methods to snapshot classes
    - convert StudentSnapshot to model class; pull precomputed values from student_snapshot
      table (batch processed the night before) instead of recomputing snapshot values
      for each student request

Application Design:
    - in order of implementation level:
      1. config (flat-file): defines application config info (db connection info/credentials + Flask config)
      2. Config (class): parses and makes application config info accessible to application  
      3. DbContext (class): defines db connection string and handles db sessions
      4. <model_name> (class): defines a model class for use by SQLAlchemy ORM
      5. <controller_name> (<controller_name>.py): defines application endpoints (APIs)
      6. web server (app.py): exposes endpoints defined in controller files

Notes:
    - Student X is a high school upperclassman
    - 3 Questions for Student X:
      - what do former students like Student X do for a living?
      - what do former student like Student X have a college degree in?
      - for former students like Student X, is occupation outcome correlated with GPA?
    
    - Student Snapshot:
      - class rank (based on GPA)*:
        - select rank
          from (
            select id, rank() over(order by gpa desc) as class_rank
            from student
            where grad_year = <student_grad_year>
          )
          where id = <student_id>;
      - historical rank (based on GPA)*:
        - select rank
          from (
            select id, rank() over(order by gpa desc) as class_rank
            from student
          )
          where id = <student_id>;
      - career fit (career_1: sim_score, career_2: sim_score, career_3: sim_score)*
        - SELECT sid AS sid, sum(sim_score) AS total_score
          FROM (SELECT student.id AS sid, student.occupation_id AS oid, %(param_1)s AS sim_score 
                FROM student 
                WHERE student.grad_year < %(grad_year_1)s AND student.gpa >= %(gpa_1)s AND student.gpa <= %(gpa_2)s
                UNION
                SELECT student.id AS sid, student.occupation_id AS oid, %(param_2)s AS sim_score 
                FROM student
                JOIN student_snapshot 
                ON student.id = student_snapshot.student_id 
                WHERE student.grad_year < %(grad_year_2)s AND student_snapshot.strongest_sub_id = %(strongest_sub_id_1)s
                UNION
                SELECT student.id AS sid, student.occupation_id AS oid, %(param_3)s AS sim_score 
                FROM student JOIN student_snapshot ON student.id = student_snapshot.student_id 
                WHERE student.grad_year < %(grad_year_3)s AND student_snapshot.weakest_sub_id = %(weakest_sub_id_1)s
          ) as fit_values
          GROUP BY sid
          ORDER BY total_score DESC 
          LIMIT %(param_4)s
      - strongest and weakest subject (max and min gpa by subject)*:
        - select field_name, area, max(avg_grade) or min(avg_grade)
          from (
            select f.field_name, f.area, avg(g.grade) as avg_grade
            from student s, grade g, course c, field f
            where s.id = g.student_id
            and g.course_id = c.id
            and c.field_id = f.id
            and s.id = 7
          );
    - School Snapshot:
      - historical class ranking:
        - average median-salary by graduating class
        - average gpa by graduating class
      - most common occupation (occupation_1: %, occupation_2: %, occupation_3: %)
      - historical gpa analysis (mean|median|mode for all recorded students)

* - resolved/implemented