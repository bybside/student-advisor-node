generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id         Int       @id @default(autoincrement())
  name       String?
  semesterId Int?
  subjectId  Int?
  facultyId  Int?
  faculty    Faculty?  @relation(fields: [facultyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  semester   Semester? @relation(fields: [semesterId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subject    Subject?  @relation(fields: [subjectId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  grades     Grade[]
}

model Faculty {
  id         Int      @id @default(autoincrement())
  firstName  String?
  middleName String?
  lastName   String?
  courses    Course[]
}

model Grade {
  grade     Int?
  studentId Int
  courseId  Int
  course    Course  @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  student   Student @relation(fields: [studentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([studentId, courseId])
}

model Occupation {
  id           Int       @id @default(autoincrement())
  name         String?
  medianSalary Int?
  students     Student[]
}

model Semester {
  id           Int      @id @default(autoincrement())
  name         String?
  academicYear Int?
  courses      Course[]
}

model Student {
  id           Int               @id @default(autoincrement())
  firstName    String?
  middleName   String?
  lastName     String?
  dob          DateTime?         @db.Date
  gradYear     Int?
  active       Boolean?
  occupationId Int?
  occupation   Occupation?       @relation(fields: [occupationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  grades       Grade[]
  snapshots    StudentSnapshot[]
}

model StudentSnapshot {
  id             Int                  @id @default(autoincrement())
  cumulativeGpa  Float                @db.Real
  classRank      Int?
  historicalRank Int?
  createdAt      DateTime             @default(now())
  studentId      Int?
  student        Student?             @relation(fields: [studentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  performances   SubjectPerformance[]
}

model Subject {
  id           Int                  @id @default(autoincrement())
  name         String?
  field        String?
  courses      Course[]
  performances SubjectPerformance[]
}

model SubjectPerformance {
  average    Float?          @db.Real
  subjectId  Int
  snapshotId Int
  snapshot   StudentSnapshot @relation(fields: [snapshotId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subject    Subject         @relation(fields: [subjectId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([subjectId, snapshotId])
}
